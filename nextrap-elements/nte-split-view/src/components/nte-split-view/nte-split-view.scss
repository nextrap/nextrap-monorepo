/* ShadowDOM Styles */

:host {
  display: block;
  box-sizing: border-box;
  width: 100%;
  height: 100%;
  --primary-size: 50%;
  --primary-min-size: initial;
  --primary-max-size: initial;
  --splitter-size: 3px;
  --splitter-hover-bg: rgba(0, 0, 0, 0.12);
  position: relative;
}

.container {
  display: flex;
  width: 100%;
  height: 100%;
  flex-direction: row;
}

:host(.vertical) .container {
  flex-direction: column;
}

:host(.reverse):not(.vertical) .container {
  flex-direction: row-reverse;
}

:host(.vertical.reverse) .container {
  flex-direction: column-reverse;
}

/* Slotted children styling:
   Primary: first element (only if at least 2 children exist)
   Secondary: second element
*/

/* Base styles for all slotted first children */
::slotted(:first-child:not(:last-child)) {
  min-inline-size: 0;
  min-block-size: 0;
}

/* Horizontal split-view: primary controls width */
:host(:not(.vertical)) ::slotted(:first-child:not(:last-child)) {
  /* Primary pane controlled by --primary-size from the host */
  flex: 0 0 var(--primary-size, 50%);
  min-width: var(--primary-min-size, 0);
  max-width: var(--primary-max-size, 100%);
  /* Height should be full height in horizontal layout */
  height: 100%;
}

/* Vertical split-view: primary controls height */
:host(.vertical) ::slotted(:first-child:not(:last-child)) {
  /* Primary pane controlled by --primary-size from the host */
  flex: 0 0 var(--primary-size, 50%);
  min-height: var(--primary-min-size, 0);
  max-height: var(--primary-max-size, 100%);
  /* Width should be full width in vertical layout */
  width: 100%;
}

::slotted(:nth-child(2)) {
  /* Secondary fills remaining space */
  flex: 1 1 auto;
  min-inline-size: 0;
  min-block-size: 0;
}

/* Splitter: lives in Shadow DOM, overlays between the two panes, no layout impact */
#splitter {
  position: absolute;
  z-index: 1;
  background: transparent;
  outline: none;
  /* disabled by default; enabled only if [resizable] */
  pointer-events: none;
}

/* Enable interaction only when resizable */
:host([resizable]) #splitter {
  pointer-events: auto;
}

/* Horizontal, normal order: handle at left = primary-size */
:host(:not(.vertical):not(.reverse)) #splitter {
  left: calc(var(--primary-size, 50%) - var(--splitter-size) / 2);
  top: 0;
  width: var(--splitter-size);
  height: 100%;
  cursor: col-resize;
}

/* Horizontal, reverse order: handle from right */
:host(:not(.vertical).reverse) #splitter {
  right: calc(var(--primary-size, 50%) - var(--splitter-size) / 2);
  top: 0;
  width: var(--splitter-size);
  height: 100%;
  cursor: col-resize;
}

/* Vertical, normal order: handle at top = primary-size */
:host(.vertical:not(.reverse)) #splitter {
  top: calc(var(--primary-size, 50%) - var(--splitter-size) / 2);
  left: 0;
  width: 100%;
  height: var(--splitter-size);
  cursor: row-resize;
}

/* Vertical, reverse order: handle from bottom */
:host(.vertical.reverse) #splitter {
  bottom: calc(var(--primary-size, 50%) - var(--splitter-size) / 2);
  left: 0;
  width: 100%;
  height: var(--splitter-size);
  cursor: row-resize;
}

/* Visualize on hover/focus only */
:host([resizable]) #splitter:hover,
:host([resizable]) #splitter:focus {
  background: var(--splitter-hover-bg);
}

/* Gripper can be used for hit-area expansion/future styling if needed */
#gripper {
  width: 100%;
  height: 100%;
}
