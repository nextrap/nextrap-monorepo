import {EventBindingsMixin, LoggingMixin, Listen} from "@trunkjs/browser-utils";
import { html, LitElement, unsafeCSS } from 'lit';
import { customElement, state, property } from 'lit/decorators.js';

// Styles for the light DOM
import { resetStyle } from '@nextrap/style-reset';

// Styles for your component's shadow DOM
import style from './<%= name %>.scss?inline';

@customElement('<%= name %>')
export class <%= elementClassName %> extends EventBindingsMixin(LoggingMixin(LitElement)) {

  static override styles = [unsafeCSS(style), unsafeCSS(resetStyle)];


  @state()
  private accessor _count = 0;

  @property({ type: String, reflect: true })
  public accessor name = '<%= name %>';

  // Example of listening to window scroll events
  @Listen('scroll', { target: 'window', options: { passive: true } })
  private onScroll(e: Event) {
    this._log('info', 'Window scrolled', e);
  }

  override render() {
    return html`
      <div>
        <h1>Hello, <%= name %>!</h1>
        <p>Count: ${this._count}</p>
        <button @click="${this._increment}">Increment</button>
      </div>
    `;
  }

  private _increment() {
    this._count++;
  }
}