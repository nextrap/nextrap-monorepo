@import '../_variables';

// Typography System
// Implements a fluid, responsive typography system using CSS custom properties and clamp()

// Calculate type scale values
@function type-scale($level, $base-size: $font-size-base, $ratio: $type-scale-ratio) {
  @return calc($base-size * pow($ratio, $level));
}

// Calculate fluid typography values
@function fluid-type($min-size, $max-size, $min-width: 320px, $max-width: 1200px) {
  $slope: calc(($max-size - $min-size) / ($max-width - $min-width));
  $slope-vw: calc($slope * 100);
  $intercept-rem: calc($min-size - $slope * $min-width);
  @return clamp($min-size, $intercept-rem + $slope-vw, $max-size);
}

// Generate CSS custom properties for the type scale
:root {
  // Base size
  --font-size-base: #{$font-size-base};
  
  // Type scale ratios
  --type-scale-ratio: #{$type-scale-ratio};
  --type-scale-ratio-mobile: #{$type-scale-ratio-mobile};
  --type-scale-ratio-desktop: #{$type-scale-ratio-desktop};
  
  // Fluid type scale
  --fs-6: #{fluid-type(0.75rem, 0.875rem)};    // Extra small
  --fs-5: #{fluid-type(0.875rem, 1rem)};       // Small
  --fs-4: #{fluid-type(1rem, 1.125rem)};       // Base
  --fs-3: #{fluid-type(1.125rem, 1.25rem)};    // Large
  --fs-2: #{fluid-type(1.25rem, 1.5rem)};      // Extra large
  --fs-1: #{fluid-type(1.5rem, 1.875rem)};     // 2x large
  --display-4: #{fluid-type(1.875rem, 2.25rem)}; // Display 4
  --display-3: #{fluid-type(2.25rem, 3rem)};     // Display 3
  --display-2: #{fluid-type(3rem, 3.75rem)};     // Display 2
  --display-1: #{fluid-type(3.75rem, 4.5rem)};   // Display 1
  
  // Line heights
  --lh-base: #{$line-height-base};
  --lh-heading: #{$line-height-heading};
  --lh-sm: 1.25;
  --lh-lg: 1.75;
}

// Base typography styles
body {
  font-family: $font-family-base;
  font-size: var(--fs-4);
  line-height: var(--lh-base);
  color: $text;
}

// Heading styles
h1, h2, h3, h4, h5, h6 {
  font-family: $font-family-heading;
  line-height: var(--lh-heading);
  color: $header;
  margin-bottom: 1rem;
}

h1 { font-size: var(--display-1); }
h2 { font-size: var(--display-2); }
h3 { font-size: var(--display-3); }
h4 { font-size: var(--display-4); }
h5 { font-size: var(--fs-1); }
h6 { font-size: var(--fs-2); }

// Text utility classes
.fs-6 { font-size: var(--fs-6); }
.fs-5 { font-size: var(--fs-5); }
.fs-4 { font-size: var(--fs-4); }
.fs-3 { font-size: var(--fs-3); }
.fs-2 { font-size: var(--fs-2); }
.fs-1 { font-size: var(--fs-1); }
.display-4 { font-size: var(--display-4); }
.display-3 { font-size: var(--display-3); }
.display-2 { font-size: var(--display-2); }
.display-1 { font-size: var(--display-1); }

// Line height utilities
.lh-sm { line-height: var(--lh-sm); }
.lh-base { line-height: var(--lh-base); }
.lh-lg { line-height: var(--lh-lg); }
.lh-heading { line-height: var(--lh-heading); }

// Link styles
a {
  color: $link-color;
  text-decoration: $text-decoration-link;
  
  &:hover {
    text-decoration: none;
  }
}

// Dark mode link color
.bg-dark a,
.text-dark a {
  color: $link-on-dark;
}

// Responsive adjustments
@media (max-width: 768px) {
  :root {
    --type-scale-ratio: var(--type-scale-ratio-mobile);
  }
}

@media (min-width: 1200px) {
  :root {
    --type-scale-ratio: var(--type-scale-ratio-desktop);
  }
}
